[project]
name = 'configue-cli'
description = 'A configue extension that adds the ability to dynamically configure your application via the command line.'
authors = [{ name = 'Illuin Technology', email = 'contact@illuin.tech' }]
maintainers = [{ name = 'Illuin Technology', email = 'contact@illuin.tech' }]
readme = 'README.md'
requires-python = '>=3.7'
classifiers = [
    'Development Status :: 4 - Beta',
    'Intended Audience :: Science/Research',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Operating System :: OS Independent',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
    'Typing :: Typed'
]
dependencies = [
    'attrs>=22.0.0',
    'configue>=4.0.0',
    'pyyaml>=5.1.0',
    'rich>=13.0.0',
]
dynamic = ["version"]

[project.optional-dependencies]
click = ["click>=8.0.0"]

[project.urls]
homepage = "https://github.com/illuin-tech/configue-cli"
repository = "https://github.com/illuin-tech/configue-cli"

[build-system]
requires = ['setuptools', 'setuptools_scm[toml]', 'wheel']
build-backend = 'setuptools.build_meta'

[tool.setuptools_scm]
fallback_version = '0.0.0-dev'

[tool.setuptools]
zip-safe = false
platforms = ['any']

[tool.setuptools.packages.find]
include = ['configue_cli', 'configue_cli.*']

[tool.setuptools.package-data]
configue_cli = ['py.typed']

[tool.black]
line-length = 120

[tool.pylint.master]
jobs = 1
load-plugins = ['pylint.extensions.no_self_use']
persistent = ['yes']
suggestion-mode = 'yes'
unsafe-load-any-extension = ['no']

[tool.pylint.'MESSAGES CONTROL']
disable = [
    'duplicate-code',
    'logging-fstring-interpolation',
    'missing-class-docstring',
    'missing-function-docstring',
    'missing-module-docstring',
    'too-few-public-methods',
    'too-many-arguments'
]
enable = ['c-extension-no-member', 'useless-suppression']

[tool.pylint.'REPORTS']
evaluation = [
    '10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)'
]
output-format = ['colorized']
reports = ['yes']
score = ['yes']

[tool.pylint.'REFACTORING']
max-nested-blocks = 5

[tool.pylint.'MISCELLANEOUS']
notes = ['FIXME', 'TODO']

[tool.pylint.'LOGGING']
logging-format-style = 'new'
logging-modules = ['logging']

[tool.pylint.'SPELLING']
max-spelling-suggestions = 4
spelling-store-unknown-words = ['no']

[tool.pylint.'TYPECHECK']
contextmanager-decorators = ['contextlib.contextmanager']
generated-members = ['numpy.*', 'torch.*']
ignore-mixin-members = ['yes']
ignore-on-opaque-inference = ['yes']
ignored-classes = ['optparse.Values', 'thread._local', '_thread._local']
ignored-modules = []
missing-member-hint = ['yes']
missing-member-hint-distance = 1
missing-member-max-choices = 1
signature-mutators = [
    'click.decorators.option',
    'click.decorators.argument',
    'configue_cli._configue_cli.inject_from_cli',
    'configue_cli.click.inject_from_cli',
    'configue_cli.fire.inject_from_cli'
]

[tool.pylint.'FORMAT']
ignore-long-lines = ['^\s*(# )?<?https?://\S+>?$']
indent-after-paren = 4
indent-string = '    '
max-line-length = 120
max-module-lines = 1000
single-line-class-stmt = ['no']
single-line-if-stmt = ['no']

[tool.pylint.'SIMILARITIES']
ignore-comments = ['yes']
ignore-docstrings = ['yes']
ignore-imports = ['no']
min-similarity-lines = 4

[tool.pylint.'BASIC']
argument-naming-style = 'snake_case'
attr-naming-style = 'snake_case'
bad-names = ['foo', 'bar', 'baz', 'toto', 'tutu', 'tata']
class-attribute-naming-style = 'snake_case'
class-naming-style = 'PascalCase'
const-naming-style = 'UPPER_CASE'
docstring-min-length = -1
function-naming-style = 'snake_case'
good-names = ['i', 'j', 'k', 'ex', 'Run', '_', 'x', 'y', 'o', 'id', 'to']
inlinevar-naming-style = 'snake_case'
method-naming-style = 'snake_case'
module-naming-style = 'snake_case'
no-docstring-rgx = ['^_']
property-classes = ['abc.abstractproperty']
variable-naming-style = 'snake_case'

[tool.pylint.'VARIABLES']
allow-global-unused-variables = ['yes']
callbacks = ['cb_', '_cb']
dummy-variables-rgx = [
    '_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_'
]
ignored-argument-names = ['_.*|^ignored_|^unused_']
init-import = ['no']
redefining-builtins-modules = [
    'six.moves',
    'past.builtins',
    'future.builtins',
    'builtins,io'
]

[tool.pylint.'DESIGN']
max-args = 5
max-attributes = 8
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 1

[tool.pylint.'IMPORTS']
allow-wildcard-with-all = ['no']
analyse-fallback-blocks = ['no']
deprecated-modules = [
    'regsub',
    'TERMIOS',
    'Bastion',
    'rexec',
    'optparse',
    'tkinter.tix'
]
known-third-party = ['enchant']

[tool.pylint.'CLASSES']
defining-attr-methods = [
    '__init__',
    '__new__',
    'setUp',
    'setup',
    '__post_init__',
    '__attrs_post_init__'
]
exclude-protected = ['_asdict', '_fields', '_replace', '_source', '_make']
valid-classmethod-first-arg = ['cls']
valid-metaclass-classmethod-first-arg = ['mcs']

[tool.pylint.'EXCEPTIONS']
overgeneral-exceptions = ['builtins.BaseException', 'builtins.Exception']

[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true
enable_error_code = ['ignore-without-code']
mypy_path = '$MYPY_CONFIG_FILE_DIR/typings'
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ['configue', 'configue.*']
ignore_missing_imports = true

[tool.coverage.run]
include = ['configue_cli/*']

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if __name__ == "__main__":',
    'if TYPE_CHECKING:',
    'def __repr__'
]

[tool.isort]
profile = 'black'
line_length = 120
